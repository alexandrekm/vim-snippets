extends c
snippet i_32b
	int32_t $1;
snippet i_64b
	int32_t $1;
snippet i_size
	size_t $1;
	
snippet newfile
	#define DEBUG
	#include <bits/stdc++.h>
	#define IGNORE_CHARS cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
	using namespace std;
	#if defined(DEBUG) && not defined(ONLINE_JUDGE)
		#include <util/prettyprint.hpp>
		#include <util/printer.hpp>
		#define d2(arg) cerr << arg << endl;
		#define d(arg1, ...) d_impl(arg1, __LINE__, ##__VA_ARGS__);
		//template<> const pretty_print::delimiters_values<char> pretty_print::delimiters<std::vector<double>, char>::values = { "< ", " ; ", " >" };
	#else
		#define d2(arg)
		#define d(...)
	#endif
	int main(){
		std::ios_base::sync_with_stdio(false);
		string line;
		while(getline(cin, line) && line != "0")
		{
			${0}
		}
		return 0;
	}

##
## STL Collections
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};
# std::vector
snippet vector
	std::vector<${1:T}> ${2};
# std::deque
snippet deque
	std::deque<${1:T}> ${2};
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
# std::list
snippet list
	std::list<${1:T}> ${2};
# std::set
snippet set
	std::set<${1:T}> ${2};
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};

##
## Class
# class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		~$1();

	private:
		${0:/* data */}
	};
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;
# std::cin
snippet cin
	std::cin >> ${1};
##
## Casts
# static
snippet sca
	static_cast<${1:unsigned}>(${2:expr})${3}
# dynamic
snippet dca
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
# reinterpret
snippet rca
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
# const
snippet cca
	const_cast<${1:unsigned}>(${2:expr})${3}
## Iteration
# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; ++$2${3:}) {
		${4}
	}
# for ui
snippet forui
	for (size_t ${2:i} = 0; $2 < ${1:count}; ++$2${3:}) {
		${4}
	}
	
# foreach
snippet fore
	for (const ${1:auto&} ${2:i} : ${3:container}) {
		${4}
	}
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}

##
## Iterators
# whole iterator
snippet whole
	(${1:v}.begin(), $1.end());
	
##
## Lambdas
# lambda (one line)
snippet lambda
	[${1}](${2}){${3}};
# lambda (multi-line)
snippet lambda_long
	[${1}](${2}){
		${3}
	};
